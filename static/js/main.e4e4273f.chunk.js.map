{"version":3,"sources":["Cellular.js","App.js","index.js"],"names":["Cell","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","React","Component","Cellular","state","cells","interval","isRunning","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","automaton","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyAutomaton","handleRandom","random","HEIGHT","rect","automatonRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","newAutomaton","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","onClick","ref","n","map","cell","key","onChange","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e4e4273f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cellular.css\";\n\nconst CELL_SIZE = 30;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\n//Render the cells to the automaton//\nclass Cell extends React.Component {\n  render() {\n    const { x, y } = this.props;\n    return (\n      <div\n        className=\"Cell\"\n        style={{\n          left: `${CELL_SIZE * x + 1}px`,\n          top: `${CELL_SIZE * y + 1}px`,\n          width: `${CELL_SIZE - 1}px`,\n          height: `${CELL_SIZE - 1}px`,\n        }}\n      />\n    );\n  }\n}\n\n//Allow user to interact to create cells, 2d array to keep state, this.state.cells keeps the\n//position of the cells, this.makecells will generate the cell list//\nclass Cellular extends React.Component {\n  constructor() {\n    super();\n    this.rows = HEIGHT / CELL_SIZE;\n    this.cols = WIDTH / CELL_SIZE;\n\n    this.automaton = this.makeEmptyAutomaton();\n  }\n\n  state = {\n    cells: [],\n    interval: 100,\n    isRunning: false,\n  };\n\n  makeEmptyAutomaton() {\n    let automaton = [];\n    for (let y = 0; y < this.rows; y++) {\n      automaton[y] = [];\n      for (let x = 0; x < this.cols; x++) {\n        automaton[y][x] = false;\n      }\n    }\n\n    return automaton;\n  }\n\n  getElementOffset() {\n    const rect = this.automatonRef.getBoundingClientRect();\n    const doc = document.documentElement;\n\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop,\n    };\n  }\n\n  makeCells() {\n    let cells = [];\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        if (this.automaton[y][x]) {\n          cells.push({ x, y });\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  handleClick = (event) => {\n    const elemOffset = this.getElementOffset();\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n      this.automaton[y][x] = !this.automaton[y][x];\n    }\n\n    this.setState({ cells: this.makeCells() });\n  };\n\n  runGame = () => {\n    this.setState({ isRunning: true });\n    this.runIteration();\n  };\n\n  stopGame = () => {\n    this.setState({ isRunning: false });\n    if (this.timeoutHandler) {\n      window.clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n  }\n  runIteration() {\n    let newAutomaton = this.makeEmptyAutomaton();\n\n    for (let y = 0; y < this.rows; y++) {\n        for (let x = 0; x < this.cols; x++) {\n            let neighbors = this.calculateNeighbors(this.automaton, x, y);\n            if (this.automaton[y][x]) {\n                if (neighbors === 2 || neighbors === 3) {\n                    newAutomaton[y][x] = true;\n                } else {\n                    newAutomaton[y][x] = false;\n                }\n            } else {\n                if (!this.automaton[y][x] && neighbors === 3) {\n                    newAutomaton[y][x] = true;\n                }\n            }\n        }\n    }\n\n    this.automaton = newAutomaton;\n    this.setState({ cells: this.makeCells() });\n\n    this.timeoutHandler = window.setTimeout(() => {\n        this.runIteration();\n    }, this.state.interval);\n}\n\n/**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} automaton\n     * @param {int} x \n     * @param {int} y \n     */\n    calculateNeighbors(automaton, x, y) {\n      let neighbors = 0;\n      const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n      for (let i = 0; i < dirs.length; i++) {\n          const dir = dirs[i];\n          let y1 = y + dir[0];\n          let x1 = x + dir[1];\n\n          if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && automaton[y1][x1]) {\n              neighbors++;\n          }\n      }\n\n      return neighbors;\n  }\n\n  handleIntervalChange = (event) => {\n      this.setState({ interval: event.target.value });\n  }\n\n  handleClear = () => {\n      this.automaton = this.makeEmptyAutomaton();\n      this.setState({ cells: this.makeCells() });\n  }\n\n  handleRandom = () => {\n      for (let y = 0; y < this.rows; y++) {\n          for (let x = 0; x < this.cols; x++) {\n              this.automaton[y][x] = (Math.random() >= 0.5);\n          }\n      }\n\n      this.setState({ cells: this.makeCells() });\n  }\n\n  // Specify the background size under classname twodspace//\n  //Add onclick to allow removal of the cell and retrieve location//\n  render() {\n    const { cells, interval, isRunning } = this.state;\n    return (\n      <div>\n        {\" \"}\n        <div\n          className=\"Twodspace\"\n          style={{\n            width: WIDTH,\n            height: HEIGHT,\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`,\n          }}\n          onClick={this.handleClick}\n          ref={(n) => {\n            this.automatonRef = n;\n          }}\n        >\n          {cells.map((cell) => (\n            <Cell x={cell.x} y={cell.y} key={`${cell.x}, ${cell.y}`} />\n          ))}\n        </div>\n        <div className=\"controls\">\n          Life Cycle{\" \"}\n          <input\n            value={this.state.interval}\n            onChange={this.handleIntervalChange}\n          />{\" \"}\n          MicroSeconds\n          {isRunning ? (\n            <button className=\"button\" onClick={this.stopGame}>\n              STOP! \n            </button>\n          ) : (\n            <button className=\"button\" onClick={this.runGame}>\n              Let the Biology Begin\n            </button>\n          )}\n          <button className=\"button\" onClick={this.handleRandom}>\n            Chaos\n          </button>\n          <button className=\"button\" onClick={this.handleClear}>\n            Wipe the Automaton\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Cellular;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Cellular from \"./Cellular.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"Title\">Conway's Brilliant Game Of Life!</h1>\n        <Cellular />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n<App />\n</Router>\n, document.getElementById('root'));"],"sourceRoot":""}